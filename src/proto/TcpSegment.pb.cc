// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TcpSegment.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TcpSegment.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TcpSegment {

namespace {

const ::google::protobuf::Descriptor* TcpSegmentHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TcpSegmentHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* TcpSegment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TcpSegment_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TcpSegment_2eproto() {
  protobuf_AddDesc_TcpSegment_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TcpSegment.proto");
  GOOGLE_CHECK(file != NULL);
  TcpSegmentHeader_descriptor_ = file->message_type(0);
  static const int TcpSegmentHeader_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpSegmentHeader, source_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpSegmentHeader, dest_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpSegmentHeader, seq_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpSegmentHeader, ack_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpSegmentHeader, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpSegmentHeader, keep_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpSegmentHeader, urg_bit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpSegmentHeader, ack_bit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpSegmentHeader, psh_bit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpSegmentHeader, rst_bit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpSegmentHeader, syn_bit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpSegmentHeader, fin_bit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpSegmentHeader, window_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpSegmentHeader, check_sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpSegmentHeader, urg_pointer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpSegmentHeader, options_),
  };
  TcpSegmentHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TcpSegmentHeader_descriptor_,
      TcpSegmentHeader::default_instance_,
      TcpSegmentHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpSegmentHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpSegmentHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TcpSegmentHeader));
  TcpSegment_descriptor_ = file->message_type(1);
  static const int TcpSegment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpSegment, tcpheader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpSegment, tcpdata_),
  };
  TcpSegment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TcpSegment_descriptor_,
      TcpSegment::default_instance_,
      TcpSegment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpSegment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpSegment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TcpSegment));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TcpSegment_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TcpSegmentHeader_descriptor_, &TcpSegmentHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TcpSegment_descriptor_, &TcpSegment::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TcpSegment_2eproto() {
  delete TcpSegmentHeader::default_instance_;
  delete TcpSegmentHeader_reflection_;
  delete TcpSegment::default_instance_;
  delete TcpSegment_reflection_;
}

void protobuf_AddDesc_TcpSegment_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020TcpSegment.proto\022\nTcpSegment\"\263\002\n\020TcpSe"
    "gmentHeader\022\023\n\013source_port\030\001 \002(\r\022\021\n\tdest"
    "_port\030\002 \002(\r\022\017\n\007seq_num\030\003 \002(\r\022\017\n\007ack_num\030"
    "\004 \002(\r\022\016\n\006offset\030\005 \002(\r\022\021\n\tkeep_bits\030\006 \002(\r"
    "\022\017\n\007URG_bit\030\007 \002(\010\022\017\n\007ACK_bit\030\010 \002(\010\022\017\n\007PS"
    "H_bit\030\t \002(\010\022\017\n\007RST_bit\030\n \002(\010\022\017\n\007SYN_bit\030"
    "\013 \002(\010\022\017\n\007FIN_bit\030\014 \002(\010\022\023\n\013window_size\030\r "
    "\002(\r\022\021\n\tcheck_sum\030\016 \002(\r\022\023\n\013URG_pointer\030\017 "
    "\002(\r\022\017\n\007Options\030\020 \001(\t\"N\n\nTcpSegment\022/\n\tTc"
    "pHeader\030\001 \002(\0132\034.TcpSegment.TcpSegmentHea"
    "der\022\017\n\007TcpData\030\002 \002(\t", 420);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TcpSegment.proto", &protobuf_RegisterTypes);
  TcpSegmentHeader::default_instance_ = new TcpSegmentHeader();
  TcpSegment::default_instance_ = new TcpSegment();
  TcpSegmentHeader::default_instance_->InitAsDefaultInstance();
  TcpSegment::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TcpSegment_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TcpSegment_2eproto {
  StaticDescriptorInitializer_TcpSegment_2eproto() {
    protobuf_AddDesc_TcpSegment_2eproto();
  }
} static_descriptor_initializer_TcpSegment_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TcpSegmentHeader::kSourcePortFieldNumber;
const int TcpSegmentHeader::kDestPortFieldNumber;
const int TcpSegmentHeader::kSeqNumFieldNumber;
const int TcpSegmentHeader::kAckNumFieldNumber;
const int TcpSegmentHeader::kOffsetFieldNumber;
const int TcpSegmentHeader::kKeepBitsFieldNumber;
const int TcpSegmentHeader::kURGBitFieldNumber;
const int TcpSegmentHeader::kACKBitFieldNumber;
const int TcpSegmentHeader::kPSHBitFieldNumber;
const int TcpSegmentHeader::kRSTBitFieldNumber;
const int TcpSegmentHeader::kSYNBitFieldNumber;
const int TcpSegmentHeader::kFINBitFieldNumber;
const int TcpSegmentHeader::kWindowSizeFieldNumber;
const int TcpSegmentHeader::kCheckSumFieldNumber;
const int TcpSegmentHeader::kURGPointerFieldNumber;
const int TcpSegmentHeader::kOptionsFieldNumber;
#endif  // !_MSC_VER

TcpSegmentHeader::TcpSegmentHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TcpSegment.TcpSegmentHeader)
}

void TcpSegmentHeader::InitAsDefaultInstance() {
}

TcpSegmentHeader::TcpSegmentHeader(const TcpSegmentHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TcpSegment.TcpSegmentHeader)
}

void TcpSegmentHeader::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  source_port_ = 0u;
  dest_port_ = 0u;
  seq_num_ = 0u;
  ack_num_ = 0u;
  offset_ = 0u;
  keep_bits_ = 0u;
  urg_bit_ = false;
  ack_bit_ = false;
  psh_bit_ = false;
  rst_bit_ = false;
  syn_bit_ = false;
  fin_bit_ = false;
  window_size_ = 0u;
  check_sum_ = 0u;
  urg_pointer_ = 0u;
  options_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TcpSegmentHeader::~TcpSegmentHeader() {
  // @@protoc_insertion_point(destructor:TcpSegment.TcpSegmentHeader)
  SharedDtor();
}

void TcpSegmentHeader::SharedDtor() {
  if (options_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete options_;
  }
  if (this != default_instance_) {
  }
}

void TcpSegmentHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TcpSegmentHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TcpSegmentHeader_descriptor_;
}

const TcpSegmentHeader& TcpSegmentHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TcpSegment_2eproto();
  return *default_instance_;
}

TcpSegmentHeader* TcpSegmentHeader::default_instance_ = NULL;

TcpSegmentHeader* TcpSegmentHeader::New() const {
  return new TcpSegmentHeader;
}

void TcpSegmentHeader::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TcpSegmentHeader*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(source_port_, ack_bit_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(psh_bit_, check_sum_);
    urg_pointer_ = 0u;
    if (has_options()) {
      if (options_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        options_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TcpSegmentHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TcpSegment.TcpSegmentHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 source_port = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_port_)));
          set_has_source_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dest_port;
        break;
      }

      // required uint32 dest_port = 2;
      case 2: {
        if (tag == 16) {
         parse_dest_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_port_)));
          set_has_dest_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_seq_num;
        break;
      }

      // required uint32 seq_num = 3;
      case 3: {
        if (tag == 24) {
         parse_seq_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_)));
          set_has_seq_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ack_num;
        break;
      }

      // required uint32 ack_num = 4;
      case 4: {
        if (tag == 32) {
         parse_ack_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ack_num_)));
          set_has_ack_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_offset;
        break;
      }

      // required uint32 offset = 5;
      case 5: {
        if (tag == 40) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_keep_bits;
        break;
      }

      // required uint32 keep_bits = 6;
      case 6: {
        if (tag == 48) {
         parse_keep_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keep_bits_)));
          set_has_keep_bits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_URG_bit;
        break;
      }

      // required bool URG_bit = 7;
      case 7: {
        if (tag == 56) {
         parse_URG_bit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &urg_bit_)));
          set_has_urg_bit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ACK_bit;
        break;
      }

      // required bool ACK_bit = 8;
      case 8: {
        if (tag == 64) {
         parse_ACK_bit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ack_bit_)));
          set_has_ack_bit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_PSH_bit;
        break;
      }

      // required bool PSH_bit = 9;
      case 9: {
        if (tag == 72) {
         parse_PSH_bit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &psh_bit_)));
          set_has_psh_bit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_RST_bit;
        break;
      }

      // required bool RST_bit = 10;
      case 10: {
        if (tag == 80) {
         parse_RST_bit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rst_bit_)));
          set_has_rst_bit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_SYN_bit;
        break;
      }

      // required bool SYN_bit = 11;
      case 11: {
        if (tag == 88) {
         parse_SYN_bit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &syn_bit_)));
          set_has_syn_bit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_FIN_bit;
        break;
      }

      // required bool FIN_bit = 12;
      case 12: {
        if (tag == 96) {
         parse_FIN_bit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fin_bit_)));
          set_has_fin_bit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_window_size;
        break;
      }

      // required uint32 window_size = 13;
      case 13: {
        if (tag == 104) {
         parse_window_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &window_size_)));
          set_has_window_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_check_sum;
        break;
      }

      // required uint32 check_sum = 14;
      case 14: {
        if (tag == 112) {
         parse_check_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &check_sum_)));
          set_has_check_sum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_URG_pointer;
        break;
      }

      // required uint32 URG_pointer = 15;
      case 15: {
        if (tag == 120) {
         parse_URG_pointer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &urg_pointer_)));
          set_has_urg_pointer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_Options;
        break;
      }

      // optional string Options = 16;
      case 16: {
        if (tag == 130) {
         parse_Options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_options()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->options().data(), this->options().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "options");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TcpSegment.TcpSegmentHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TcpSegment.TcpSegmentHeader)
  return false;
#undef DO_
}

void TcpSegmentHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TcpSegment.TcpSegmentHeader)
  // required uint32 source_port = 1;
  if (has_source_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->source_port(), output);
  }

  // required uint32 dest_port = 2;
  if (has_dest_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dest_port(), output);
  }

  // required uint32 seq_num = 3;
  if (has_seq_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seq_num(), output);
  }

  // required uint32 ack_num = 4;
  if (has_ack_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ack_num(), output);
  }

  // required uint32 offset = 5;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->offset(), output);
  }

  // required uint32 keep_bits = 6;
  if (has_keep_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->keep_bits(), output);
  }

  // required bool URG_bit = 7;
  if (has_urg_bit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->urg_bit(), output);
  }

  // required bool ACK_bit = 8;
  if (has_ack_bit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->ack_bit(), output);
  }

  // required bool PSH_bit = 9;
  if (has_psh_bit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->psh_bit(), output);
  }

  // required bool RST_bit = 10;
  if (has_rst_bit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->rst_bit(), output);
  }

  // required bool SYN_bit = 11;
  if (has_syn_bit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->syn_bit(), output);
  }

  // required bool FIN_bit = 12;
  if (has_fin_bit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->fin_bit(), output);
  }

  // required uint32 window_size = 13;
  if (has_window_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->window_size(), output);
  }

  // required uint32 check_sum = 14;
  if (has_check_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->check_sum(), output);
  }

  // required uint32 URG_pointer = 15;
  if (has_urg_pointer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->urg_pointer(), output);
  }

  // optional string Options = 16;
  if (has_options()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->options().data(), this->options().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "options");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TcpSegment.TcpSegmentHeader)
}

::google::protobuf::uint8* TcpSegmentHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TcpSegment.TcpSegmentHeader)
  // required uint32 source_port = 1;
  if (has_source_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->source_port(), target);
  }

  // required uint32 dest_port = 2;
  if (has_dest_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dest_port(), target);
  }

  // required uint32 seq_num = 3;
  if (has_seq_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seq_num(), target);
  }

  // required uint32 ack_num = 4;
  if (has_ack_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ack_num(), target);
  }

  // required uint32 offset = 5;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->offset(), target);
  }

  // required uint32 keep_bits = 6;
  if (has_keep_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->keep_bits(), target);
  }

  // required bool URG_bit = 7;
  if (has_urg_bit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->urg_bit(), target);
  }

  // required bool ACK_bit = 8;
  if (has_ack_bit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->ack_bit(), target);
  }

  // required bool PSH_bit = 9;
  if (has_psh_bit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->psh_bit(), target);
  }

  // required bool RST_bit = 10;
  if (has_rst_bit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->rst_bit(), target);
  }

  // required bool SYN_bit = 11;
  if (has_syn_bit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->syn_bit(), target);
  }

  // required bool FIN_bit = 12;
  if (has_fin_bit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->fin_bit(), target);
  }

  // required uint32 window_size = 13;
  if (has_window_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->window_size(), target);
  }

  // required uint32 check_sum = 14;
  if (has_check_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->check_sum(), target);
  }

  // required uint32 URG_pointer = 15;
  if (has_urg_pointer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->urg_pointer(), target);
  }

  // optional string Options = 16;
  if (has_options()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->options().data(), this->options().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "options");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TcpSegment.TcpSegmentHeader)
  return target;
}

int TcpSegmentHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 source_port = 1;
    if (has_source_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_port());
    }

    // required uint32 dest_port = 2;
    if (has_dest_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_port());
    }

    // required uint32 seq_num = 3;
    if (has_seq_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num());
    }

    // required uint32 ack_num = 4;
    if (has_ack_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ack_num());
    }

    // required uint32 offset = 5;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // required uint32 keep_bits = 6;
    if (has_keep_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->keep_bits());
    }

    // required bool URG_bit = 7;
    if (has_urg_bit()) {
      total_size += 1 + 1;
    }

    // required bool ACK_bit = 8;
    if (has_ack_bit()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool PSH_bit = 9;
    if (has_psh_bit()) {
      total_size += 1 + 1;
    }

    // required bool RST_bit = 10;
    if (has_rst_bit()) {
      total_size += 1 + 1;
    }

    // required bool SYN_bit = 11;
    if (has_syn_bit()) {
      total_size += 1 + 1;
    }

    // required bool FIN_bit = 12;
    if (has_fin_bit()) {
      total_size += 1 + 1;
    }

    // required uint32 window_size = 13;
    if (has_window_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->window_size());
    }

    // required uint32 check_sum = 14;
    if (has_check_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->check_sum());
    }

    // required uint32 URG_pointer = 15;
    if (has_urg_pointer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->urg_pointer());
    }

    // optional string Options = 16;
    if (has_options()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->options());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TcpSegmentHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TcpSegmentHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TcpSegmentHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TcpSegmentHeader::MergeFrom(const TcpSegmentHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_port()) {
      set_source_port(from.source_port());
    }
    if (from.has_dest_port()) {
      set_dest_port(from.dest_port());
    }
    if (from.has_seq_num()) {
      set_seq_num(from.seq_num());
    }
    if (from.has_ack_num()) {
      set_ack_num(from.ack_num());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_keep_bits()) {
      set_keep_bits(from.keep_bits());
    }
    if (from.has_urg_bit()) {
      set_urg_bit(from.urg_bit());
    }
    if (from.has_ack_bit()) {
      set_ack_bit(from.ack_bit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_psh_bit()) {
      set_psh_bit(from.psh_bit());
    }
    if (from.has_rst_bit()) {
      set_rst_bit(from.rst_bit());
    }
    if (from.has_syn_bit()) {
      set_syn_bit(from.syn_bit());
    }
    if (from.has_fin_bit()) {
      set_fin_bit(from.fin_bit());
    }
    if (from.has_window_size()) {
      set_window_size(from.window_size());
    }
    if (from.has_check_sum()) {
      set_check_sum(from.check_sum());
    }
    if (from.has_urg_pointer()) {
      set_urg_pointer(from.urg_pointer());
    }
    if (from.has_options()) {
      set_options(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TcpSegmentHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TcpSegmentHeader::CopyFrom(const TcpSegmentHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TcpSegmentHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;

  return true;
}

void TcpSegmentHeader::Swap(TcpSegmentHeader* other) {
  if (other != this) {
    std::swap(source_port_, other->source_port_);
    std::swap(dest_port_, other->dest_port_);
    std::swap(seq_num_, other->seq_num_);
    std::swap(ack_num_, other->ack_num_);
    std::swap(offset_, other->offset_);
    std::swap(keep_bits_, other->keep_bits_);
    std::swap(urg_bit_, other->urg_bit_);
    std::swap(ack_bit_, other->ack_bit_);
    std::swap(psh_bit_, other->psh_bit_);
    std::swap(rst_bit_, other->rst_bit_);
    std::swap(syn_bit_, other->syn_bit_);
    std::swap(fin_bit_, other->fin_bit_);
    std::swap(window_size_, other->window_size_);
    std::swap(check_sum_, other->check_sum_);
    std::swap(urg_pointer_, other->urg_pointer_);
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TcpSegmentHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TcpSegmentHeader_descriptor_;
  metadata.reflection = TcpSegmentHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TcpSegment::kTcpHeaderFieldNumber;
const int TcpSegment::kTcpDataFieldNumber;
#endif  // !_MSC_VER

TcpSegment::TcpSegment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TcpSegment.TcpSegment)
}

void TcpSegment::InitAsDefaultInstance() {
  tcpheader_ = const_cast< ::TcpSegment::TcpSegmentHeader*>(&::TcpSegment::TcpSegmentHeader::default_instance());
}

TcpSegment::TcpSegment(const TcpSegment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TcpSegment.TcpSegment)
}

void TcpSegment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tcpheader_ = NULL;
  tcpdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TcpSegment::~TcpSegment() {
  // @@protoc_insertion_point(destructor:TcpSegment.TcpSegment)
  SharedDtor();
}

void TcpSegment::SharedDtor() {
  if (tcpdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tcpdata_;
  }
  if (this != default_instance_) {
    delete tcpheader_;
  }
}

void TcpSegment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TcpSegment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TcpSegment_descriptor_;
}

const TcpSegment& TcpSegment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TcpSegment_2eproto();
  return *default_instance_;
}

TcpSegment* TcpSegment::default_instance_ = NULL;

TcpSegment* TcpSegment::New() const {
  return new TcpSegment;
}

void TcpSegment::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_tcpheader()) {
      if (tcpheader_ != NULL) tcpheader_->::TcpSegment::TcpSegmentHeader::Clear();
    }
    if (has_tcpdata()) {
      if (tcpdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tcpdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TcpSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TcpSegment.TcpSegment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TcpSegment.TcpSegmentHeader TcpHeader = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tcpheader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TcpData;
        break;
      }

      // required string TcpData = 2;
      case 2: {
        if (tag == 18) {
         parse_TcpData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tcpdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tcpdata().data(), this->tcpdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tcpdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TcpSegment.TcpSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TcpSegment.TcpSegment)
  return false;
#undef DO_
}

void TcpSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TcpSegment.TcpSegment)
  // required .TcpSegment.TcpSegmentHeader TcpHeader = 1;
  if (has_tcpheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tcpheader(), output);
  }

  // required string TcpData = 2;
  if (has_tcpdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tcpdata().data(), this->tcpdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tcpdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tcpdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TcpSegment.TcpSegment)
}

::google::protobuf::uint8* TcpSegment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TcpSegment.TcpSegment)
  // required .TcpSegment.TcpSegmentHeader TcpHeader = 1;
  if (has_tcpheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tcpheader(), target);
  }

  // required string TcpData = 2;
  if (has_tcpdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tcpdata().data(), this->tcpdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tcpdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tcpdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TcpSegment.TcpSegment)
  return target;
}

int TcpSegment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TcpSegment.TcpSegmentHeader TcpHeader = 1;
    if (has_tcpheader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tcpheader());
    }

    // required string TcpData = 2;
    if (has_tcpdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tcpdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TcpSegment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TcpSegment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TcpSegment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TcpSegment::MergeFrom(const TcpSegment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tcpheader()) {
      mutable_tcpheader()->::TcpSegment::TcpSegmentHeader::MergeFrom(from.tcpheader());
    }
    if (from.has_tcpdata()) {
      set_tcpdata(from.tcpdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TcpSegment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TcpSegment::CopyFrom(const TcpSegment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TcpSegment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_tcpheader()) {
    if (!this->tcpheader().IsInitialized()) return false;
  }
  return true;
}

void TcpSegment::Swap(TcpSegment* other) {
  if (other != this) {
    std::swap(tcpheader_, other->tcpheader_);
    std::swap(tcpdata_, other->tcpdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TcpSegment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TcpSegment_descriptor_;
  metadata.reflection = TcpSegment_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TcpSegment

// @@protoc_insertion_point(global_scope)
